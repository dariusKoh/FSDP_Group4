const PDFDocument = require("pdfkit");
const { queryDataByproj_id } = require("./query-db");

// PDF Builder
function buildTestReport(doc, testData) {
    // Layout Constants
    const PAGE_MARGIN = 50;
    const LINE_HEIGHT = 24;
    const PAGE_WIDTH = 612;
    const PAGE_HEIGHT = 792;
    const CONTENT_WIDTH = PAGE_WIDTH - PAGE_MARGIN * 2;

    // Visual Settings
    const COLORS = {
        primary: "#2C3E50",
        secondary: "#3498DB",
        text: "#333333",
        success: "#4CAF50", // Green
        fail: "#F44336", // Red
    };

    // Trackers
    let currentPage = 1;
    let yPosition = PAGE_MARGIN;
    let tableOfContents = [];

    // Helper Functions
    const spaceCheck = (neededHeight) => {
        const footerBuffer = 40;
        if (yPosition + neededHeight + footerBuffer > PAGE_HEIGHT) {
            addContentFooter();
            doc.addPage();
            yPosition = PAGE_MARGIN;
            currentPage++;
        }
    };

    const addContentFooter = () => {
        doc.save()
            .fontSize(10)
            .fillColor("#666666")
            .text(`Page ${currentPage}`, PAGE_WIDTH - PAGE_MARGIN, PAGE_HEIGHT - 35, { align: "right" })
            .restore();
    };

    // Cover Page
    function createCoverPage() {
        doc.fontSize(36)
            .fillColor(COLORS.primary)
            .font("Helvetica-Bold")
            .text("QA Automation Report", PAGE_MARGIN, 150, { align: "center" });

        doc.fontSize(28)
            .fillColor(COLORS.secondary)
            .text("Automation Test", PAGE_MARGIN, 230, { align: "center" });

        doc.moveTo(PAGE_MARGIN, 300)
            .lineTo(PAGE_WIDTH - PAGE_MARGIN, 300)
            .strokeColor(COLORS.primary)
            .lineWidth(2)
            .stroke();

        doc.fontSize(16)
            .fillColor(COLORS.text)
            .text(`Report Date: ${new Date().toLocaleDateString()}`, PAGE_MARGIN, 350, { align: "center" })
            .text(`Test Cases: ${testData.length}`, PAGE_MARGIN, 390, { align: "center" })
            .text("Generated By: QA Automation Team", PAGE_MARGIN, 430, { align: "center" });

        tableOfContents.push({ title: "Front Page", page: currentPage });

        doc.addPage();
        currentPage++;
    }

    // Table of Contents
    function createTableOfContents() {
        doc.fontSize(22).fillColor(COLORS.primary).font("Helvetica-Bold").text("Table of Contents", { align: "center" });
        yPosition = 150;

        tableOfContents.forEach((entry) => {
            doc.fontSize(14)
                .fillColor(COLORS.text)
                .font("Helvetica")
                .text(`${entry.title}`, PAGE_MARGIN, yPosition)
                .text(`${entry.page}`, PAGE_WIDTH - PAGE_MARGIN - 50, yPosition);
            yPosition += 30;
        });

        doc.addPage();
        currentPage++;
    }

    // Summary Page
    function createSummaryPage() {
        const passed = testData.filter((test) => test.status === "PASSED").length;
        const failed = testData.length - passed;
        const successRate = ((passed / testData.length) * 100).toFixed(2);

        doc.fontSize(22).fillColor(COLORS.primary).font("Helvetica-Bold").text("Overview", { align: "center" });

        yPosition = 150;

        doc.fontSize(16).fillColor(COLORS.success).font("Helvetica").text(`${passed}/${testData.length} Cases Passed`);
        yPosition += 20;
        doc.fillColor(COLORS.fail).text(`${failed}/${testData.length} Cases Failed`);
        yPosition += 20;
        doc.fillColor(COLORS.text).text(`Success Rate: ${successRate}%`);
        yPosition += 30;

        doc.text(`Report Generated On: ${new Date().toLocaleString()}`);
        yPosition += 50;

        tableOfContents.push({ title: "Summary", page: currentPage });

        doc.addPage();
        currentPage++;
    }

    createCoverPage();
    createTableOfContents();
    createSummaryPage();

    // Reset Y position **before starting test cases**
    yPosition = PAGE_MARGIN;

    // Test Case Pages
    testData.forEach((testCase, index) => {
        if (index > 0) {
            doc.addPage();
            yPosition = PAGE_MARGIN;
            currentPage++;
        }

        doc.font("Helvetica-Bold").fillColor(COLORS.text).fontSize(18).text(`Test Case #${index + 1}`, PAGE_MARGIN, yPosition);
        yPosition += LINE_HEIGHT * 1.5;

        // Status Formatting
        doc.fontSize(12)
            .fillColor(COLORS.text)
            .text("Test ID:", PAGE_MARGIN, yPosition)
            .text(testCase.testId, PAGE_MARGIN + 60, yPosition)

            .text("Status:", PAGE_MARGIN + 250, yPosition)
            .fillColor(testCase.status === "PASSED" ? COLORS.success : COLORS.fail)
            .text(testCase.status, PAGE_MARGIN + 300, yPosition)
            .fillColor(COLORS.text);

        yPosition += LINE_HEIGHT * 1.2;

        doc.text("Date:", PAGE_MARGIN, yPosition)
            .text(new Date(testCase.createdAt).toLocaleString(), PAGE_MARGIN + 60, yPosition)

            .text("Duration:", PAGE_MARGIN + 250, yPosition)
            .text(`${testCase.duration}ms`, PAGE_MARGIN + 300, yPosition);

        yPosition += LINE_HEIGHT * 2;

        // Failure Analysis (Dynamic Positioning)
        if (testCase.status !== "PASSED") {
            doc.font("Helvetica-Bold").text("Issue Breakdown", PAGE_MARGIN, yPosition);
            yPosition += LINE_HEIGHT;

            doc.font("Helvetica").text(testCase.failureMessages || "No errors", PAGE_MARGIN, yPosition, {
                width: CONTENT_WIDTH - 20,
            });
            yPosition += doc.heightOfString(testCase.failureMessages || "No errors", { width: CONTENT_WIDTH }) + 10;
        }

        // Key Takeaways **(Dynamic Positioning)**
        spaceCheck(50);  // Ensure there's enough space before adding key takeaways
        doc.font("Helvetica-Bold").text("Key Takeaways", PAGE_MARGIN, yPosition);
        yPosition += LINE_HEIGHT;

        doc.font("Helvetica").text(testCase.summary || "No summary provided", PAGE_MARGIN, yPosition, {
            width: CONTENT_WIDTH - 20,
        });
        yPosition += doc.heightOfString(testCase.summary || "No summary provided", { width: CONTENT_WIDTH }) + 20;

        // Table of Contents Entry
        tableOfContents.push({ title: `Test Case ${index + 1}`, page: currentPage });

        addContentFooter();
    });

    return doc;
}

async function generatePDF(response, testData) {
    const doc = new PDFDocument();
    buildTestReport(doc, testData);
    response.setHeader("Content-Type", "application/pdf");
    response.setHeader("Content-Disposition", `attachment; filename="Test_Report.pdf"`);
    doc.pipe(response);
    doc.end();
}

module.exports = { generatePDF };
